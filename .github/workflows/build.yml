name: Xcode - Build and Test

on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']

jobs:
  build-test:
    name: Build and Test iOS Sprite Game
    runs-on: macos-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Default Scheme
        run: |
          # Debug: List directory contents
          echo "Current directory contents:"
          ls -la

          # Find Xcode project/workspace
          if [ -n "$(find . -maxdepth 1 -name '*.xcworkspace' -print -quit)" ]; then 
            echo "Found workspace file"
            project_file=$(find . -maxdepth 1 -name "*.xcworkspace" | head -n 1)
          else 
            echo "Looking for xcodeproj file"
            project_file=$(find . -maxdepth 1 -name "*.xcodeproj" | head -n 1)
          fi

          if [ -z "$project_file" ]; then
            echo "Error: No Xcode project or workspace found"
            exit 1
          fi

          echo "Using project file: $project_file"

          # Get scheme list with error handling
          echo "Getting scheme list..."
          scheme_list=$(xcodebuild -list -json -project "$project_file" 2>&1)
          if [ $? -ne 0 ]; then
            echo "Error getting scheme list: $scheme_list"
            echo "Attempting to use project name as scheme..."
            default=$(basename "$project_file" | sed 's/\.[^.]*$//')
          else
            default=$(echo "$scheme_list" | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]" 2>/dev/null)
            if [ -z "$default" ]; then
              echo "Could not parse scheme from JSON, using project name..."
              default=$(basename "$project_file" | sed 's/\.[^.]*$//')
            fi
          fi

          echo "Using default scheme: $default"
          echo "$default" > default_scheme
          echo "DEFAULT_SCHEME=$default" >> $GITHUB_ENV

      - name: Build
        env:
          scheme: ${{ env.DEFAULT_SCHEME }}
        run: |
          # Read scheme if not provided explicitly
          if [ -z "$scheme" ]; then scheme=$(cat default_scheme); fi
          echo "Building with scheme: $scheme"

          # Determine whether to build using workspace or project file
          if [ -n "$(find . -maxdepth 1 -name '*.xcworkspace' -print -quit)" ]; then 
            filetype_parameter="workspace"
            file_to_build=$(find . -maxdepth 1 -name "*.xcworkspace" | head -n 1)
          else 
            filetype_parameter="project"
            file_to_build=$(find . -maxdepth 1 -name "*.xcodeproj" | head -n 1)
          fi

          echo "Building $filetype_parameter: $file_to_build"

          # Clean, build, and analyze using the determined file
          xcodebuild clean build analyze -scheme "$scheme" -"$filetype_parameter" "$file_to_build" | xcpretty
          exit ${PIPESTATUS[0]}

      - name: Test
        env:
          scheme: ${{ env.DEFAULT_SCHEME }}
        run: |
          if [ -z "$scheme" ]; then scheme=$(cat default_scheme); fi
          echo "Testing with scheme: $scheme"

          if [ -n "$(find . -maxdepth 1 -name '*.xcworkspace' -print -quit)" ]; then 
            filetype_parameter="workspace"
            file_to_build=$(find . -maxdepth 1 -name "*.xcworkspace" | head -n 1)
          else 
            filetype_parameter="project"
            file_to_build=$(find . -maxdepth 1 -name "*.xcodeproj" | head -n 1)
          fi

          echo "Testing $filetype_parameter: $file_to_build"

          # Run tests on a simulator (using a more recent iOS version)
          xcodebuild test -scheme "$scheme" -"$filetype_parameter" "$file_to_build" \
            -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' | xcpretty
          exit ${PIPESTATUS[0]}
